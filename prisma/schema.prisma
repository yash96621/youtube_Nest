// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  picture           String
  bgimage           String?
  email             String     @unique
  History_save      Boolean    @default(true)
  notify_count      Int        @default(0)
  notification      Int        @default(0)
  Subscriber        Int        @default(0)
  Notification_info String[]
  createdAt         DateTime   @default(now())
  Uploaded_video    Video[]    @relation("Uploaded_video")
  Subscribe         User[]     @relation("Subscribe", fields: [SubscribeIDs], references: [id])
  SubscribeIDs      String[]   @unique @db.ObjectId
  SubscribeBy       User[]     @relation("Subscribe", fields: [SubscribeByIDs], references: [id])
  SubscribeByIDs    String[]   @unique @db.ObjectId
  LikedVideosIds    String[]   @unique @db.ObjectId
  Liked_Videos      Video[]    @relation("Liked Videos", fields: [LikedVideosIds], references: [id])
  dislike_VideosIds String[]   @unique @db.ObjectId
  dislike_Videos    Video[]    @relation("Disliked Videos", fields: [dislike_VideosIds], references: [id])
  HistoryIds        String[]   @unique @db.ObjectId
  History           Video[]    @relation("History", fields: [HistoryIds], references: [id])
  Watchlist         String[]   @unique @db.ObjectId
  Comments          Comments[]
  GroupIDs          String[]   @db.ObjectId
  Groups            Groups[]   @relation("Memebers", fields: [GroupIDs], references: [id])
  OwnedGroups       Groups[]   @relation("admin")
  Chat              Chat[]     @relation("Chat_Owner")
}

model Video {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  video_name        String
  description       String?
  Categorys         String[]
  Search_key        String[]
  video_link        String
  thumbnail_link    String
  createdAt         DateTime   @default(now())
  views             Int        @default(0)
  likes             Int        @default(0)
  dislikes          Int        @default(0)
  uploader_id       String     @db.ObjectId
  uploaded_Info     User       @relation("Uploaded_video", fields: [uploader_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  HistoryIDs        String[]   @unique @db.ObjectId
  History           User[]     @relation("History", fields: [HistoryIDs], references: [id])
  LikedIDs          String[]   @unique @db.ObjectId
  Liked_Videos      User[]     @relation("Liked Videos", fields: [LikedIDs], references: [id])
  dislike_VideosIds String[]   @unique @db.ObjectId
  dislike_Videos    User[]     @relation("Disliked Videos", fields: [dislike_VideosIds], references: [id])
  Comments          Comments[] @relation("Comments")
  AccessIDs         String[]   @db.ObjectId
  Access            Groups[]   @relation("AccessVideo", fields: [AccessIDs], references: [id])
}

model Comments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  video_id  String   @db.ObjectId
  video     Video    @relation("Comments", fields: [video_id], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Groups {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  GroupName        String   @unique
  admin_id         String   @db.ObjectId
  admin_Info       User     @relation("admin", fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  memeberIDs       String[] @db.ObjectId
  memebers         User[]   @relation("Memebers", fields: [memeberIDs], references: [id])
  AccessVideoIDS   String[] @db.ObjectId
  AccessVideo      Video[]  @relation("AccessVideo", fields: [memeberIDs], references: [id])
  Chats            Chat[]   @relation("Chats")
  GroupImage       String?
  GroupDescription String?
}

model Chat {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  message String

  Chat_OwnerId   String   @db.ObjectId
  Chat_OwnerInfo User     @relation("Chat_Owner", fields: [Chat_OwnerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Group_ID       String   @db.ObjectId
  Group_Chat     Groups   @relation("Chats", fields: [Group_ID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt      DateTime @default(now())
}
