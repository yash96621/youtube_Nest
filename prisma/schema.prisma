// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  picture        String
  email          String   @unique
  History_save   Boolean  @default(true)
  notify_count   Int?     @default(0)
  notification   Int?     @default(0)
  createdAt      DateTime @default(now())
  Uploaded_video Video[]  @relation("Uploaded_video")

  // Download_videoId String[]     @db.ObjectId
  // Download_video   Video[]      @relation("Download_video", fields: [Download_videoId], references: [id])
  // Comment_videoId  String[]     @db.ObjectId
  // Comment_video    Video[]      @relation("Comment_video", fields: [Comment_videoId], references: [id])
  // Liked_videoId    String[]     @db.ObjectId
  // Liked_video      Video[]      @relation("Liked_video", fields: [Liked_videoId], references: [id])
  // disLiked_videoId String[]     @db.ObjectId
  // disLiked_video   Video[]      @relation("disLiked_video", fields: [disLiked_videoId], references: [id])
  Subscription Subscriber[]

  HistoryIds String[] @unique @db.ObjectId
  History    Video[]  @relation(fields: [HistoryIds], references: [id])
  // History      History?
}

model Video {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  video_name     String
  description    String?
  tag            String[]   @default(["video"])
  video_link     String
  thumbnail_link String
  createdAt      DateTime   @default(now())
  views          Int        @default(0)
  likes          Int        @default(0)
  dislikes       Int        @default(0)
  uploader_id    String     @db.ObjectId
  uploaded_Info  User       @relation("Uploaded_video", fields: [uploader_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  // watchlist      User[]   @relation("watchlist")
  // Download_video User[]   @relation("Download_video")
  // Comment_video  User[]   @relation("Comment_video")
  // Liked_video    User[]   @relation("Liked_video")
  // disLiked_video User[]   @relation("disLiked_video")
  // categoryIDs    String[]   @db.ObjectId
  // categories     History[]  @relation(fields: [categoryIDs], references: [id])
  HistoryIDs     String[]   @unique @db.ObjectId
  History        User[]     @relation(fields: [HistoryIDs], references: [id])
  Comments       Comments[] @relation("Comments")
}

model Comments {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  user_photo String
  user_name  String
  message    String
  video_id   String @db.ObjectId
  video      Video  @relation("Comments", fields: [video_id], references: [id])
}

model Subscriber {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

// model History {
//   id      String  @id @default(auto()) @map("_id") @db.ObjectId
//   Video   Video?  @relation(fields: [videoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   videoId String? @db.ObjectId
//   User    User[]
// }

// model History {
//   id      String   @id @default(auto()) @map("_id") @db.ObjectId
//   Video   Video[]  @relation(fields: [videoId], references: [id])
//   videoId String[] @db.ObjectId
//   User    User     @relation(fields: [userId], references: [id])
//   userId  String   @unique @db.ObjectId
// }
