// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  picture           String
  email             String   @unique
  History_save      Boolean  @default(true)
  notify_count      Int?     @default(0)
  notification      Int?     @default(0)
  Notification_info String[] @db.ObjectId
  createdAt         DateTime @default(now())
  Uploaded_video    Video[]  @relation("Uploaded_video")
  followedBy        User[]   @relation("UserFollows", fields: [followedByIDs], references: [id])
  followedByIDs     String[] @unique @db.ObjectId
  following         User[]   @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs      String[] @unique @db.ObjectId
  dislike_VideosIds String[] @unique @db.ObjectId
  LikedVideosIds    String[] @unique @db.ObjectId
  Liked_Videos      Video[]  @relation("Liked Videos", fields: [LikedVideosIds], references: [id])
  HistoryIds        String[] @unique @db.ObjectId
  History           Video[]  @relation("History", fields: [HistoryIds], references: [id])
  Watchlist         String[] @unique @db.ObjectId
}

model Video {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  video_name     String
  description    String?
  Categorys      String[]
  Search_key     String[]
  video_link     String
  thumbnail_link String
  createdAt      DateTime   @default(now())
  views          Int        @default(0)
  likes          Int        @default(0)
  dislikes       Int        @default(0)
  uploader_id    String     @db.ObjectId
  uploaded_Info  User       @relation("Uploaded_video", fields: [uploader_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  HistoryIDs     String[]   @unique @db.ObjectId
  History        User[]     @relation("History", fields: [HistoryIDs], references: [id])
  LikedIDs       String[]   @unique @db.ObjectId
  Liked_Videos   User[]     @relation("Liked Videos", fields: [LikedIDs], references: [id])
  Comments       Comments[] @relation("Comments")
}

model Comments {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  user_photo String
  user_name  String
  message    String
  video_id   String @db.ObjectId
  video      Video  @relation("Comments", fields: [video_id], references: [id])
}
